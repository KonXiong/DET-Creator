--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEDICATED_MULTIPLIER_CIRCUITRY="AUTO" DEVICE_FAMILY="Cyclone II" DSP_BLOCK_BALANCING="Auto" INPUT_A_IS_CONSTANT="NO" INPUT_B_IS_CONSTANT="YES" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=31 LPM_WIDTHB=24 LPM_WIDTHP=55 LPM_WIDTHS=1 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 9.0SP2 cbx_cycloneii 2008:05:19:10:57:37:SJ cbx_lpm_add_sub 2009:05:07:10:25:28:SJ cbx_lpm_mult 2008:09:30:18:36:56:SJ cbx_mgl 2009:02:26:16:06:21:SJ cbx_padd 2008:09:04:11:11:31:SJ cbx_stratix 2008:09:18:16:08:35:SJ cbx_stratixii 2008:11:14:16:08:42:SJ cbx_util_mgl 2008:11:21:14:58:47:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION cycloneii_mac_mult (aclr, clk, dataa[dataa_width-1..0], datab[datab_width-1..0], ena, signa, signb)
WITH ( dataa_clock, dataa_width, datab_clock, datab_width, signa_clock, signb_clock)
RETURNS ( dataout[dataa_width+datab_width-1..0]);
FUNCTION cycloneii_mac_out (aclr, clk, dataa[dataa_width-1..0], ena)
WITH ( dataa_width = 0, output_clock)
RETURNS ( dataout[dataa_width-1..0]);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = dsp_9bit 8 lut 70 
SUBDESIGN mult_u211
( 
	dataa[30..0]	:	input;
	datab[23..0]	:	input;
	result[54..0]	:	output;
) 
VARIABLE
	add13_result[37..0]	:	WIRE;
	add9_result[31..0]	:	WIRE;
	mac_mult1 : cycloneii_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 18,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult3 : cycloneii_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 6,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult5 : cycloneii_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 13,
			datab_clock = "none",
			datab_width = 18,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult7 : cycloneii_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 13,
			datab_clock = "none",
			datab_width = 6,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_out2 : cycloneii_mac_out
		WITH (
			dataa_width = 36,
			output_clock = "none"
		);
	mac_out4 : cycloneii_mac_out
		WITH (
			dataa_width = 24,
			output_clock = "none"
		);
	mac_out6 : cycloneii_mac_out
		WITH (
			dataa_width = 31,
			output_clock = "none"
		);
	mac_out8 : cycloneii_mac_out
		WITH (
			dataa_width = 19,
			output_clock = "none"
		);
	sft10a[31..0] : soft;
	sft11a[31..0] : soft;
	sft12a[31..0] : soft;
	sft14a[37..0] : soft;
	sft15a[37..0] : soft;
	sft16a[37..0] : soft;
	w227w	: WIRE;
	w455w[55..0]	: WIRE;

BEGIN 
	add13_result[] = sft14a[].out + sft15a[].out;
	add9_result[] = sft10a[].out + sft11a[].out;
	mac_mult1.dataa[] = ( dataa[17..0]);
	mac_mult1.datab[] = ( datab[17..0]);
	mac_mult1.signa = B"0";
	mac_mult1.signb = B"0";
	mac_mult3.dataa[] = ( dataa[17..0]);
	mac_mult3.datab[] = ( datab[23..18]);
	mac_mult3.signa = B"0";
	mac_mult3.signb = B"0";
	mac_mult5.dataa[] = ( dataa[30..18]);
	mac_mult5.datab[] = ( datab[17..0]);
	mac_mult5.signa = B"0";
	mac_mult5.signb = B"0";
	mac_mult7.dataa[] = ( dataa[30..18]);
	mac_mult7.datab[] = ( datab[23..18]);
	mac_mult7.signa = B"0";
	mac_mult7.signb = B"0";
	mac_out2.dataa[] = mac_mult1.dataout[];
	mac_out4.dataa[] = mac_mult3.dataout[];
	mac_out6.dataa[] = mac_mult5.dataout[];
	mac_out8.dataa[] = mac_mult7.dataout[];
	sft10a[].in = ( w227w, ( mac_out6.dataout[30..30], ( mac_out6.dataout[29..29], ( mac_out6.dataout[28..28], ( mac_out6.dataout[27..27], ( mac_out6.dataout[26..26], ( mac_out6.dataout[25..25], ( mac_out6.dataout[24..24], ( mac_out8.dataout[5..5], ( mac_out8.dataout[4..4], ( mac_out8.dataout[3..3], ( mac_out8.dataout[2..2], ( mac_out8.dataout[1..1], ( mac_out8.dataout[0..0], ( mac_out6.dataout[17..17], ( mac_out6.dataout[16..16], ( mac_out6.dataout[15..15], ( mac_out6.dataout[14..14], ( mac_out6.dataout[13..13], ( mac_out6.dataout[12..12], ( mac_out6.dataout[11..11], ( mac_out6.dataout[10..10], ( mac_out6.dataout[9..9], ( mac_out6.dataout[8..8], ( mac_out6.dataout[7..7], ( mac_out6.dataout[6..6], ( mac_out6.dataout[5..5], ( mac_out6.dataout[4..4], ( mac_out6.dataout[3..3], ( mac_out6.dataout[2..2], ( mac_out6.dataout[1..0])))))))))))))))))))))))))))))));
	sft11a[].in = ( w227w, ( w227w, ( w227w, ( w227w, ( w227w, ( w227w, ( w227w, ( w227w, ( mac_out6.dataout[23..23], ( mac_out6.dataout[22..22], ( mac_out6.dataout[21..21], ( mac_out6.dataout[20..20], ( mac_out6.dataout[19..19], ( mac_out6.dataout[18..18], ( mac_out4.dataout[17..17], ( mac_out4.dataout[16..16], ( mac_out4.dataout[15..15], ( mac_out4.dataout[14..14], ( mac_out4.dataout[13..13], ( mac_out4.dataout[12..12], ( mac_out4.dataout[11..11], ( mac_out4.dataout[10..10], ( mac_out4.dataout[9..9], ( mac_out4.dataout[8..8], ( mac_out4.dataout[7..7], ( mac_out4.dataout[6..6], ( mac_out4.dataout[5..5], ( mac_out4.dataout[4..4], ( mac_out4.dataout[3..3], ( mac_out4.dataout[2..2], ( mac_out4.dataout[1..0])))))))))))))))))))))))))))))));
	sft12a[].in = add9_result[];
	sft14a[].in = ( w227w, ( mac_out8.dataout[18..18], ( mac_out8.dataout[17..17], ( mac_out8.dataout[16..16], ( mac_out8.dataout[15..15], ( mac_out8.dataout[14..14], ( mac_out8.dataout[13..13], ( mac_out8.dataout[12..12], ( mac_out8.dataout[11..11], ( mac_out8.dataout[10..10], ( mac_out8.dataout[9..9], ( mac_out8.dataout[8..8], ( mac_out8.dataout[7..7], ( mac_out8.dataout[6..6], ( mac_out4.dataout[23..23], ( mac_out4.dataout[22..22], ( mac_out4.dataout[21..21], ( mac_out4.dataout[20..20], ( mac_out4.dataout[19..19], ( mac_out4.dataout[18..18], ( mac_out2.dataout[35..35], ( mac_out2.dataout[34..34], ( mac_out2.dataout[33..33], ( mac_out2.dataout[32..32], ( mac_out2.dataout[31..31], ( mac_out2.dataout[30..30], ( mac_out2.dataout[29..29], ( mac_out2.dataout[28..28], ( mac_out2.dataout[27..27], ( mac_out2.dataout[26..26], ( mac_out2.dataout[25..25], ( mac_out2.dataout[24..24], ( mac_out2.dataout[23..23], ( mac_out2.dataout[22..22], ( mac_out2.dataout[21..21], ( mac_out2.dataout[20..20], ( mac_out2.dataout[19..18])))))))))))))))))))))))))))))))))))));
	sft15a[].in = ( w227w, ( w227w, ( w227w, ( w227w, ( w227w, ( w227w, ( sft12a[31..31].out, ( sft12a[30..30].out, ( sft12a[29..29].out, ( sft12a[28..28].out, ( sft12a[27..27].out, ( sft12a[26..26].out, ( sft12a[25..25].out, ( sft12a[24..24].out, ( sft12a[23..23].out, ( sft12a[22..22].out, ( sft12a[21..21].out, ( sft12a[20..20].out, ( sft12a[19..19].out, ( sft12a[18..18].out, ( sft12a[17..17].out, ( sft12a[16..16].out, ( sft12a[15..15].out, ( sft12a[14..14].out, ( sft12a[13..13].out, ( sft12a[12..12].out, ( sft12a[11..11].out, ( sft12a[10..10].out, ( sft12a[9..9].out, ( sft12a[8..8].out, ( sft12a[7..7].out, ( sft12a[6..6].out, ( sft12a[5..5].out, ( sft12a[4..4].out, ( sft12a[3..3].out, ( sft12a[2..2].out, ( sft12a[1..1].out, sft12a[0..0].out)))))))))))))))))))))))))))))))))))));
	sft16a[].in = add13_result[];
	result[54..0] = w455w[54..0];
	w227w = B"0";
	w455w[] = ( sft16a[37..36].out, sft16a[35..34].out, sft16a[33..32].out, sft16a[31..30].out, sft16a[29..28].out, sft16a[27..26].out, sft16a[25..24].out, sft16a[23..22].out, sft16a[21..20].out, sft16a[19..18].out, sft16a[17..16].out, sft16a[15..14].out, sft16a[13..12].out, sft16a[11..10].out, sft16a[9..8].out, sft16a[7..6].out, sft16a[5..4].out, sft16a[3..2].out, sft16a[1..0].out, mac_out2.dataout[17..17], mac_out2.dataout[16..16], mac_out2.dataout[15..15], mac_out2.dataout[14..14], mac_out2.dataout[13..13], mac_out2.dataout[12..12], mac_out2.dataout[11..11], mac_out2.dataout[10..10], mac_out2.dataout[9..9], mac_out2.dataout[8..8], mac_out2.dataout[7..7], mac_out2.dataout[6..6], mac_out2.dataout[5..5], mac_out2.dataout[4..4], mac_out2.dataout[3..3], mac_out2.dataout[2..2], mac_out2.dataout[1..1], mac_out2.dataout[0..0]);
END;
--VALID FILE
